import httpx
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.utils.deep_linking import create_start_link, decode_payload

from marzban import MarzbanAPI, UserCreate, UserModify, ProxySettings
from config import MARZBAN_URL, MARZBAN_USERNAME, MARZBAN_PASSWORD, prices, main_text, connect_text

from app.utils import send_message_to_user
from app.database import (
    add_payment_to_db, update_payment_status, add_user_to_db, 
    user_use_trial_to_db, check_user_trial, add_referral_to_db, 
    verify_referral, get_user_from_db
)
from app.keyboards import (
    main_menu, sub_menu, go_main_menu, get_payment_menu, 
    go_key_menu, get_key_menu, android_menu, ios_menu
)
from app.yoo_kassa import create_payment, check_payment

router = Router()
api = MarzbanAPI(base_url=MARZBAN_URL)



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- #

@router.message(CommandStart(deep_link=True))
async def handle_start_with_referral(message: Message, command: CommandObject):
    args = command.args
    if args:
        referral_user_id = str(message.from_user.id)
        referrer_user_id = decode_payload(args)

        if not await get_user_from_db(referral_user_id) and not await verify_referral(referral_user_id, use=False):
            await add_referral_to_db(referrer_user_id, referral_user_id)
            await message.answer(
                "ü´Ç –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                "üéÅ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî 7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
            )
    await message.answer(main_text, reply_markup=main_menu, parse_mode=ParseMode.HTML)

@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer(main_text, reply_markup=main_menu, parse_mode=ParseMode.HTML)


# --- –ö–Ω–æ–ø–∫–∏ --- #

@router.callback_query(F.data == 'sub')
async def handle_sub(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        '<b>–£—Å–ª–æ–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞</b>\n'
        '–†–µ–≥–∏–æ–Ω: –§–∏–Ω–ª—è–Ω–¥–∏—è üá´üáÆ\n'
        '–¢—Ä–∞—Ñ–∏–∫: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n'
        '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –¥–æ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:',
        reply_markup=sub_menu,
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == 'ref')
async def handle_referral(callback: CallbackQuery):
    from run import bot  # –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –Ω–∞—Ä—É–∂—É
    await callback.answer()
    user_id = str(callback.from_user.id)
    referral_link = await create_start_link(bot=bot, payload=user_id, encode=True)
    await callback.message.edit_text(
        "üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 7 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫!\n\n"
        f"ü´Ç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: <code>{referral_link}</code>",
        reply_markup=go_main_menu,
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == 'main_menu')
async def handle_main_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(main_text, reply_markup=main_menu, parse_mode=ParseMode.HTML)

@router.callback_query(F.data == 'connect_android')
async def handle_android(callback: CallbackQuery):
    await callback.answer()
    user_info = await get_user_info(callback)
    await callback.message.edit_text(
        connect_text('Android', 'Google Play'),
        reply_markup=await android_menu(user_info.subscription_url),
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data == 'connect_ios')
async def handle_ios(callback: CallbackQuery):
    await callback.answer()
    user_info = await get_user_info(callback)
    await callback.message.edit_text(
        connect_text('iOS', 'App Store'),
        reply_markup=await ios_menu(user_info.subscription_url),
        parse_mode=ParseMode.HTML
    )


# --- –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ --- #

@router.callback_query(F.data == 'trial_5_days')
async def handle_trial(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    if await check_user_trial(user_id):
        await callback.answer('‚ùå –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.', show_alert=True)
        return
    await callback.answer()
    await user_use_trial_to_db(user_id)
    await activate_subscription(callback, period=0, trial=True)


# --- –û–ø–ª–∞—Ç–∞ --- #

@router.callback_query(F.data.startswith("sub_"))
async def handle_payment_request(callback: CallbackQuery):
    await callback.answer()
    user_id = str(callback.from_user.id)
    period = int(callback.data.split("_")[1])
    price = prices.get(period)
    payment_url, label, payment_yoo_id, status = await create_payment(price, user_id, period)
    await add_payment_to_db(label, user_id, price, status, payment_yoo_id)

    await callback.message.edit_text(
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period} –º–µ—Å.\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂¬ª",
        reply_markup=await get_payment_menu(payment_url, price, payment_yoo_id, period)
    )

@router.callback_query(F.data.startswith("check_payment_"))
async def handle_check_payment(callback: CallbackQuery):
    _, _, payment_yoo_id, period_str = callback.data.split("_")
    period = int(period_str)
    if await check_payment(payment_yoo_id):
        await update_payment_status("succeeded", payment_yoo_id)
        await activate_subscription(callback, period)
    else:
        await callback.answer('‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', show_alert=True)


# --- –ü–æ–¥–ø–∏—Å–∫–∞ --- #

async def activate_subscription(callback: CallbackQuery, period: int = 0, trial: bool = False):
    user_id = str(callback.from_user.id)
    username = str(callback.from_user.username)
    token = await api.get_token(username=MARZBAN_USERNAME, password=MARZBAN_PASSWORD)

    try:
        user_info = await api.get_user(username=user_id, token=token.access_token)
        expiration_date = user_info.expire
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            user_info = None
            expiration_date = 0
        else:
            raise

    now = int(datetime.now().timestamp())
    add_time = 5 * 86400 if trial else period * 30 * 86400
    next_expire = max(expiration_date, now) + add_time

    if not user_info:
        await api.add_user(UserCreate(username=user_id, proxies={'vless': ProxySettings(flow='xtls-rprx-vision')},
                                      expire=next_expire, note=username), token=token.access_token)
    else:
        await api.modify_user(user_id, UserModify(expire=next_expire), token=token.access_token)

    # —Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞
    is_ref, referrer_user_id = await verify_referral(user_id, use=True)
    if is_ref:
        next_expire += 7 * 86400
        await api.modify_user(user_id, UserModify(expire=next_expire), token=token.access_token)

        referrer_info = await api.get_user(referrer_user_id, token=token.access_token)
        referrer_new_exp = max(referrer_info.expire, now) + 7 * 86400
        await api.modify_user(referrer_user_id, UserModify(expire=referrer_new_exp), token=token.access_token)
        await send_message_to_user(referrer_user_id)

    user_info = await api.get_user(user_id, token=token.access_token)
    await add_user_to_db(user_id, username, datetime.fromtimestamp(user_info.expire), trial)

    # —Ç–µ–∫—Å—Ç
    if trial:
        text = '‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 5 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!'
    elif is_ref:
        text = f'‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {period} –º–µ—Å.\nüéÅ +7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –æ—Ç –¥—Ä—É–≥–∞!'
    else:
        text = f'‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {period} –º–µ—Å.'

    await callback.message.edit_text(text, reply_markup=go_key_menu)


@router.callback_query(F.data == 'key')
async def handle_key(callback: CallbackQuery):
    user_info = await get_user_info(callback)
    if user_info:
        expire_date = datetime.fromtimestamp(user_info.expire)
        days_left = (expire_date - datetime.now()).days + 1
        if days_left < 0:
            await callback.message.edit_text('‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.', reply_markup=go_main_menu)
        else:
            await callback.message.edit_text(
                f'üîë –í–∞—à –∫–ª—é—á: <code>{user_info.subscription_url}</code>\n\n'
                f'üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expire_date.strftime("%d.%m.%Y")}\n'
                f'‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n'
                'üì± –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
                reply_markup=await get_key_menu(user_info.subscription_url),
                parse_mode=ParseMode.HTML
            )
    else:
        await callback.message.edit_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.', reply_markup=go_main_menu)


# --- –£—Ç–∏–ª–∏—Ç—ã --- #

async def get_user_info(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    token = await api.get_token(username=MARZBAN_USERNAME, password=MARZBAN_PASSWORD)
    try:
        return await api.get_user(username=user_id, token=token.access_token)
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            return None
        raise
